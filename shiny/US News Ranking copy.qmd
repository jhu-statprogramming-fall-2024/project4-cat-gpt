---
title: "US News Ranking"
format: html
editor: visual
---

```{r, messsage=FALSE, warning=FALSE}
library(rvest)
library(dplyr)
library(RSelenium)
library(stringr)
library(tools)
library(purrr)
library(tidyverse)
library(lubridate)
library(tidytext)
library(wordcloud)

library(shiny)
library(shinydashboard)
```

##  Scrape data from HTML to get US News Top 50 US Universities

```{r}
url <- "https://www.collegekickstart.com/blog/item/u-s-news-world-report-posts-2025-college-rankings"

top50_college <- read_html(url)|> 
    html_element("table")|> 
    html_table() 

top50_college <- as.data.frame(top50_college) |>
  mutate(Change = `Rank (2025)` - `Rank (2024)`)

reddit_dir <- read.csv("Reddit_Dictionary.csv")

top50_college <- bind_cols (top50_college, reddit_dir %>% select(Reddit_subdirectory = `Reddit_subdirectory`))|>
  mutate(Reddit_subdirectory = tolower(Reddit_subdirectory))
```

## Data Cleaning & Wrangling: prepare data for Shiny Dashboard

```{r, message=FALSE}
csv_files <- list.files(path = "university_posts", pattern = "*.csv", full.names = TRUE)

reddit_preprocess <- function(path){
  # read in each csv file by using the path
  data <- read.csv(path) 
  
  # add school name as a column to each csv file
  data <- data %>% 
    mutate(school = file_path_sans_ext(basename(path)))
  
  ## separate created_date into year, month, day
  data <- data %>% 
    mutate(created_date = as.Date(created_date),
           year = year(created_date),
           month = month(created_date),
           day = day(created_date))
  
  return(data)
}


# Read each csv reddit file for each school and combine them into 1 big file using map()
reddit_all <- map(csv_files, reddit_preprocess) %>%     
  bind_rows() %>% 
  select(-c(url, score, num_comments)) %>%
  mutate(selftext = paste(title, selftext, sep = " "))

reddit_all <- left_join(reddit_all, top50_college, by = c("school" = "Reddit_subdirectory"))
sentiment_afinn <- read.csv("sentiment_afinn.csv") 
words_to_exclude <- c("university", "student","school", "i'm", "students") # exclude the following words when doing text analysis

sentiment_score <- reddit_all %>% 
  unnest_tokens(word, selftext) %>%
  anti_join(stop_words) %>%
  filter(!(word %in% words_to_exclude)) %>%
  group_by(title)%>%
  count(word) %>%
  inner_join(sentiment_afinn) %>%
  summarise(sentiment_score = mean(value)) 


reddit_all <- left_join(reddit_all, sentiment_score, by = "title") %>%
  mutate(sentiment_score = map(sentiment_score, ~ ifelse(is.na(.), 0, .)) %>% unlist()) #change NA values to 0
```


## Create shiny dashboard

1. 画overall university comparison的图：一个是每年每月top5 university by highest score, 一个是last 5 university, 还有wordcloud
2. 画每个学校的图：每年每月的wordcloud

```{r}
ui <- dashboardPage(
  dashboardHeader(title = "College Reddit"),
  dashboardSidebar(
    sidebarMenu(
      menuItem("Overall Comparison", tabName = "overall_comparison", icon = icon("chart-bar")),
      menuItem("Each University", tabName = "school", icon = icon("school"))
    )
  ),
  dashboardBody(
    tabItems(
      # Tab for overall comparison
      tabItem(
        tabName = "overall_comparison",
        fluidRow(
          column(
            width = 3,
            # Sidebar inputs for year and month
            selectInput(
              inputId = "selected_year",
              label = "Select Year:",
              choices = unique(reddit_all$year),
              selected = 2024
            ),
            selectInput(
              inputId = "selected_month",
              label = "Select Month:",
              choices = 1:12,
              selected = 10
            )
          ),
          
          column(
            width = 9,
            fluidRow(
                box(
                  plotOutput(outputId = "top5_plot"),
                  width = 12
                )
              ),
            fluidRow(
                box(
                  plotOutput(outputId = "bottom5_plot"),
                  width = 12
                )
              ),
           
          column(
            width = 9,
            box(
                plotOutput(outputId = "overall_wordcloud"),
                width = 12
              )
            )
          )
        )
      )
    )
  )
)

server <- function(input, output) {
  # Reactive data filtered by year and month
  top5_data <- reactive({
    reddit_all %>%
      filter(year == input$selected_year, month == input$selected_month) %>%
      group_by(Institution) %>%
      summarise(monthly_score = sum(sentiment_score)) %>%
      arrange(desc(monthly_score)) %>%
      head(5) # Top 5 schools
  })
  
  bottom5_data <- reactive({
    reddit_all %>%
      filter(year == input$selected_year, month == input$selected_month) %>%
      group_by(Institution) %>%
      summarise(monthly_score = sum(sentiment_score)) %>%
      arrange(monthly_score) %>%
      head(5) 
  })
  
  wordcloud_data <- reactive({
    reddit_all %>% 
    filter(year == input$selected_year, month == input$selected_month) %>%
    unnest_tokens(word, selftext) %>%
    anti_join(stop_words) %>%
    filter(!(word %in% words_to_exclude)) %>%
    count(word, sort = TRUE) %>%
    top_n(20, n)
  })
  
  # Render the plot
  output$top5_plot <- renderPlot({
    
    top_data <- top5_data()
    if (nrow(top_data) == 0) {
      plot.new()
      title("No data available for the selected year and month")
    return()
    }
    
    ggplot(top_data, aes(y = reorder(Institution, monthly_score), x = monthly_score)) +
      geom_bar(stat = "identity", fill = "pink") +
      labs(
        title = paste0("Top 5 Schools in ", input$selected_year,".", input$selected_month),
        y = NULL,
        x = "Sentiment Score") +
      theme_minimal()
  })

  output$bottom5_plot <- renderPlot({
      
      bottom_data <- bottom5_data()
      if (nrow(bottom_data) == 0) {
        plot.new()
        title("No data available for the selected year and month")
      return()
      }
      
      ggplot(bottom_data, aes(y = reorder(Institution,monthly_score), x = monthly_score)) +
        geom_bar(stat = "identity", fill = "skyblue") +
        labs(
          title = paste0("Bottom 5 Schools in ", input$selected_year,".", input$selected_month),
          y = NULL,
          x = "Sentiment Score") +
        theme_minimal()
    })
  
  output$overall_wordcloud <- renderPlot({
      wordcloud_data <- wordcloud_data()
      if (nrow(wordcloud_data) == 0) {
        return(NULL)
      }
      wordcloud(
        words = wordcloud_data$word,
        freq = wordcloud_data$n,
        max.words = 30,
        random.order = FALSE,
        colors = brewer.pal(8, "Dark2")
    )
    })
}
shinyApp(ui = ui, server = server)
```

